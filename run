#!/usr/bin/env python3

"""Dev tasks script"""

import argparse
import glob
import os
import subprocess
import sys
from typing import Any, Callable, Iterable, Optional, TypeVar

import trainlog._version


def run(*cmd: Optional[str]) -> None:
    """Run the given command, exit immediately on error."""
    command = [arg for arg in cmd if arg is not None]
    print(f"$ {' '.join(command)}", file=sys.stderr)
    if not os.environ.get("RUN_DRY_RUN"):
        exit_code = subprocess.call(command)
        if exit_code:
            sys.exit(exit_code)


T = TypeVar("T")


def cli(*args: Any, **kwargs: Any) -> Callable[[T], T]:
    """Decorator to create a command line subparser."""

    def wrap(fn: T) -> T:
        if not hasattr(fn, "cli_args"):
            setattr(fn, "cli_args", [])
        if args or kwargs:
            getattr(fn, "cli_args").append((args, kwargs))
        return fn

    return wrap


# Commands


SOURCES = ["trainlog", "run", "setup.py"]
PYLINT_TEST_IGNORES = ["missing-module-docstring", "missing-function-docstring"]


def _source_files() -> Iterable[str]:
    for src in SOURCES:
        if os.path.isfile(src):
            yield src
        else:
            for folder, _, files in os.walk(src):
                for file in files:
                    if not os.path.splitext(file)[-1] in {".pyc"}:
                        yield os.path.join(folder, file)


def sources(kind: str = "all") -> Iterable[str]:
    """A list of source files of a given type "all", "main" or "tests"."""
    for src in _source_files():
        parts = src.split(os.path.sep)
        is_test = len(parts) >= 2 and parts[-2] == "tests"
        if kind == "all" or ((kind == "tests") == is_test):
            yield src


@cli("--check", dest="no_format", action="store_true", help="only check, don't format")
def format(no_format: bool) -> None:  # pylint: disable=redefined-builtin
    """run linters to statically check the code"""
    run("black", "--check" if no_format else None, *sources())
    run("isort", "--check" if no_format else None, *sources())


@cli()
def types() -> None:
    """run mypy to statically check types"""
    run("mypy", "--strict", *sources("main"))
    run("mypy", *sources("tests"))


@cli()
def lint() -> None:
    """run linters to statically check the code"""
    run("flake8", *sources())
    run("pylint", *sources("main"))
    run(
        "pylint",
        *sources("tests"),
        "--disable=" + ",".join(PYLINT_TEST_IGNORES),
    )


@cli("-k", "--only", help="pattern to select tests")
@cli(
    "-s",
    "--no-capture",
    dest="capture",
    action="store_false",
    help="disable test output capturing",
)
def test(only: Optional[str], capture: bool) -> None:
    """run unit tests"""
    run(
        "pytest",
        f"-k {only}" if only else None,
        "--no-cov" if only else None,
        None if capture else "--capture=no",
        *(src for src in SOURCES if os.path.isdir(src)),
    )


@cli()
def doc() -> None:
    """generate module documentation"""
    if os.path.exists("build/doc"):
        run("rm", "-r", "build/doc")
    run(
        "pdoc3",
        "trainlog",
        "--html",
        "--output-dir",
        "build/doc",
        "--template-dir",
        "doc/template",
    )


@cli("--no-format", action="store_true")
def check(no_format: bool) -> None:
    """run all pre-flight checks"""
    test(only=None, capture=True)
    format(no_format=no_format)
    types()
    lint()
    doc()


@cli()
def test_example() -> None:
    """run slower example tests"""
    run(
        "pytest",
        "-m example",
        "--no-cov",
        "--capture=no",
        *(src for src in SOURCES if os.path.isdir(src)),
    )


DIST_PAGES = "dist/pages"


def _publish_doc(name: str, replace: bool, latest: bool) -> None:
    remote = (
        subprocess.check_output(["git", "remote", "get-url", "origin"])
        .decode()
        .rstrip("\n")
    )

    run("mkdir", "-p", os.path.dirname(DIST_PAGES))
    if not os.path.isdir(DIST_PAGES):
        run("git", "clone", "-b", "pages", remote, DIST_PAGES)
    run("git", "-C", DIST_PAGES, "fetch")
    run("git", "-C", DIST_PAGES, "reset", "--hard", "origin/pages")

    local_docpath = f"{DIST_PAGES}/{name}"
    if os.path.isdir(local_docpath):
        if replace:
            run("rm", "-r", local_docpath)
        else:
            print(f"Error! {local_docpath!r} already exists", file=sys.stderr)
            sys.exit(1)
    run("cp", "-r", "build/doc/trainlog", local_docpath)
    if latest:
        if os.path.isfile(f"{DIST_PAGES}/latest"):
            run("rm", f"{DIST_PAGES}/latest")
        run("ln", "-s", name, f"{DIST_PAGES}/latest")
    run("git", "-C", DIST_PAGES, "add", name, "latest" if latest else None)
    run("git", "-C", DIST_PAGES, "commit", "-m", f"Update {name}")


@cli()
def publish_dev_doc() -> None:
    """publish dev documentation"""
    doc()
    _publish_doc("dev", replace=True, latest=False)
    run("git", "-C", DIST_PAGES, "push", "origin", "HEAD:pages")


@cli()
def release() -> None:
    """release trainlog to pypi & github-pages"""
    version = trainlog._version.__version__  # pylint:disable=protected-access
    if (
        subprocess.call(["git", "diff", "--quiet"])
        or subprocess.call(["git", "diff", "--cached", "--quiet"])
        or not subprocess.call(["git", "rev-parse", f"refs/tags/{version}"])
    ):
        print(
            "Error! cannot release with a dirty working tree or already-tagged version",
            file=sys.stderr,
        )
        if not os.environ.get("RUN_DRY_RUN"):
            sys.exit(1)

    check(no_format=True)
    test_example()
    run("python", "setup.py", "sdist", "bdist_wheel")
    _publish_doc(version, replace=False, latest=True)

    run("twine", "upload", *glob.glob(f"dist/trainlog-{version}*"))
    run("git", "-C", DIST_PAGES, "push", "origin", "HEAD:pages")
    run("git", "push", "origin", f"HEAD:refs/tags/{version}")

    print(
        "### The last step is up to you:\n"
        "   Please update __version__ in trainlog._version.py",
        file=sys.stderr,
    )


# Script


def _main() -> None:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "-d", "--dry-run", action="store_true", help="just print, don't execute"
    )
    parser.set_defaults(action=lambda: check(no_format=False))
    subparsers = parser.add_subparsers()

    for key, value in globals().items():
        if hasattr(value, "cli_args"):
            sub = subparsers.add_parser(key.replace("_", "-"), help=value.__doc__)
            for arg_args, arg_kwargs in getattr(value, "cli_args"):
                sub.add_argument(*arg_args, **arg_kwargs)
            sub.set_defaults(action=value)

    args = vars(parser.parse_args())
    action = args.pop("action")
    os.environ.setdefault("RUN_DRY_RUN", "1" if args.pop("dry_run") else "")
    action(**args)


if __name__ == "__main__":
    _main()
