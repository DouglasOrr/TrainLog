#!/usr/bin/env python3

"""Dev tasks script"""

import argparse
import os
import subprocess
import sys
from typing import Any, Callable, Iterable, Optional, TypeVar


def run(*cmd: Optional[str]) -> None:
    """Run the given command, exit immediately on error."""
    command = [arg for arg in cmd if arg is not None]
    print(f"$ {' '.join(command)}", file=sys.stderr)
    exit_code = subprocess.call(command)
    if exit_code:
        sys.exit(exit_code)


T = TypeVar("T")


def cli(*args: Any, **kwargs: Any) -> Callable[[T], T]:
    """Decorator to create a command line subparser."""

    def wrap(fn: T) -> T:
        if not hasattr(fn, "cli_args"):
            setattr(fn, "cli_args", [])
        if args or kwargs:
            getattr(fn, "cli_args").append((args, kwargs))
        return fn

    return wrap


# Commands


SOURCES = ["run", "trainlog"]
PYLINT_TEST_IGNORES = ["missing-module-docstring", "missing-function-docstring"]


def _source_files() -> Iterable[str]:
    for src in SOURCES:
        if os.path.isfile(src):
            yield src
        else:
            for folder, _, files in os.walk(src):
                for file in files:
                    if not os.path.splitext(file)[-1] in {".pyc"}:
                        yield os.path.join(folder, file)


def sources(kind: str = "all") -> Iterable[str]:
    """A list of source files of a given type "all", "main" or "tests"."""
    for src in _source_files():
        parts = src.split(os.path.sep)
        is_test = len(parts) >= 2 and parts[-2] == "tests"
        if kind == "all" or ((kind == "tests") == is_test):
            yield src


@cli("--check", dest="no_format", action="store_true", help="only check, don't format")
def format(no_format: bool) -> None:  # pylint: disable=redefined-builtin
    """run linters to statically check the code"""
    run("black", "--check" if no_format else None, *sources())
    run("isort", "--check" if no_format else None, *sources())


@cli()
def lint() -> None:
    """run linters to statically check the code"""
    run("mypy", "--strict", *sources("main"))
    run("mypy", *sources("tests"))
    run("flake8", *sources())
    run("pylint", *sources("main"))
    run(
        "pylint",
        *sources("tests"),
        "--disable=" + ",".join(PYLINT_TEST_IGNORES),
    )


@cli("-k", "--only", help="pattern to select tests")
def test(only: Optional[str]) -> None:
    """run unit tests"""
    run(
        "pytest",
        f"-k {only}" if only else None,
        *(src for src in SOURCES if os.path.isdir(src)),
    )


@cli("--no-format", action="store_true")
def check(no_format: bool) -> None:
    """run all pre-flight checks"""
    test(None)
    format(no_format=no_format)
    lint()


# Script


def _main() -> None:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.set_defaults(action=lambda: check(no_format=False))
    subparsers = parser.add_subparsers()

    for key, value in globals().items():
        if hasattr(value, "cli_args"):
            sub = subparsers.add_parser(key, help=value.__doc__)
            for arg_args, arg_kwargs in getattr(value, "cli_args"):
                sub.add_argument(*arg_args, **arg_kwargs)
            sub.set_defaults(action=value)

    args = vars(parser.parse_args())
    action = args.pop("action")
    action(**args)


if __name__ == "__main__":
    _main()
